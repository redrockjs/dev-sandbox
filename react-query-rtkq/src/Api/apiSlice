import { BaseQueryApi } from "@reduxjs/toolkit/dist/query/baseQueryTypes";
import {
  fetchBaseQuery,
  FetchArgs,
  createApi,
} from "@reduxjs/toolkit/query/react";

import { AppState } from "./store";

export const baseUrl = "https://jsonplaceholder.typicode.com/";

const baseQuery = fetchBaseQuery({
  /**
   * Base url settings section
   */
  baseUrl,

  /**
   * Headers settings section
   */
  prepareHeaders: (headers, { getState }) => {
    const accessToken = (getState() as AppState).auth.accessToken;

    // If we have a accessToken set in state, let's assume that we should be passing it.
    if (accessToken) {
      headers.set("authorization", `Bearer ${accessToken}`);
    }

    return headers;
  },

  /**
   * Include credentials, that cookies returns
   */
  credentials: "include",
});

const baseQueryWithReauth = async (
  args: string | FetchArgs,
  api: BaseQueryApi,
  extraOptions: {}
) => {
  let result = await baseQuery(args, api, extraOptions);

  if (result?.error?.status === 403) {
    // Send refresh token to get new access token
    const refreshResult = await baseQuery("/refresh", api, extraOptions);

    if (refreshResult?.data) {
      const accessToken = (api.getState() as AppState).auth.accessToken;

      // Store the new token
      api.dispatch(setCredentials({ ...refreshResult.data, accessToken }));
      // Retry the original query with new access token
      result = await baseQuery(args, api, extraOptions);
    } else {
      api.dispatch(delCredentials({}));
    }
  }

  return result;
};

export const apiSlice = createApi({
  reducerPath: "api",
  baseQuery: baseQueryWithReauth,
  endpoints: () => ({}),
});
